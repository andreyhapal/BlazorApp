@page "/categories"

@using BlazorApp.Data
@using BlazorApp.Models

@inject BlazorApp.Data.CategoryService categoryService
@inject BlazorApp.Services.AgeGroupService AgeGroupService
@inject BlazorApp.Services.WeightGroupService WeightGroupService

<div class="main-header-div">
    <h1 class="main-header">Категории</h1>
</div>
<RadzenTabs>
    <Tabs>
        <RadzenTabsItem Text="Категории">
            <RadzenButton Text="Добавить" class="primary-button m" />
            <RadzenGrid Data=@categories AllowFiltering="true" AllowSorting="true" AllowPaging="true">
                <Columns>
                    <RadzenGridColumn TItem="SportCategory" Property="Id" Title="ID" Width="100px" />
                    <RadzenGridColumn TItem="SportCategory" Property="Name" Title="Категория" />
                    <RadzenGridColumn TItem="SportCategory" Property="Type.Name" Title="Тип">
                        <Template Context="data">
                            @data.Type.Name
                        </Template>
                    </RadzenGridColumn>
                    <RadzenGridColumn TItem="SportCategory" Property="AgeName" Title="Возрастная группа">
                        <Template Context="data">
                            @data.AgeGroup.AgeName
                        </Template>
                    </RadzenGridColumn>
                    <RadzenGridColumn TItem="SportCategory" Property="AgeFrom" Title="Возраст ОТ" Width="110px">
                        <Template Context="data">
                            @data.AgeGroup.From
                        </Template>
                    </RadzenGridColumn>
                    <RadzenGridColumn TItem="SportCategory" Property="AgeTo" Title="Возраст ДО" Width="110px">
                        <Template Context="data">
                            @data.AgeGroup.To
                        </Template>
                    </RadzenGridColumn>
                    <RadzenGridColumn TItem="SportCategory" Property="Sex" Title="Пол" Width="100px">
                        <Template Context="data">
                            @data.Sex.Name
                        </Template>
                    </RadzenGridColumn>
                    <RadzenGridColumn TItem="SportCategory" Property="WeightFrom" Title="Вес ОТ" Width="100px">
                        <Template Context="data">
                            @data.WeightGroup.From
                        </Template>
                    </RadzenGridColumn>
                    <RadzenGridColumn TItem="SportCategory" Property="WeightTo" Title="Вес ДО" Width="100px">
                        <Template Context="data">
                            @data.WeightGroup.To
                        </Template>
                    </RadzenGridColumn>
                    <RadzenGridColumn TItem="SportCategory" Bubble="false" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="70px">
                        <Template Context="data">
                            <RadzenButton Icon="close" class="btn-danger" Size="ButtonSize.Small">
                            </RadzenButton>
                        </Template>
                    </RadzenGridColumn>
                </Columns>
            </RadzenGrid>
        </RadzenTabsItem>
        <RadzenTabsItem Text="Возрастные группы">
            <RadzenButton Text="Добавить" class="primary-button m"/>
            <RadzenGrid Data=@ageGroups AllowFiltering="true" AllowSorting="true" AllowPaging="true">
                <Columns>
                    <RadzenGridColumn TItem="AgeGroup" Property="Id" Title="ID" />
                    <RadzenGridColumn TItem="AgeGroup" Property="AgeName" Title="Возрастная группа" />
                    <RadzenGridColumn TItem="AgeGroup" Property="From" Title="Возраст От" />
                    <RadzenGridColumn TItem="AgeGroup" Property="To" Title="Возраст ДО" />
                    <RadzenGridColumn TItem="AgeGroup" Bubble="false" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="70px">
                        <Template Context="data">
                            <RadzenButton Icon="close" class="btn-danger" Size="ButtonSize.Small"/>
                            <RadzenButton Icon="edit" class="primary-button" Size="ButtonSize.Small"/>
                        </Template>
                    </RadzenGridColumn>
                </Columns>
            </RadzenGrid>
        </RadzenTabsItem>
        <RadzenTabsItem Text="Весовые группы">
            <RadzenButton Text="Добавить" class="primary-button m" />
            <RadzenGrid Data=@weightGroups AllowFiltering="true" AllowSorting="true" AllowPaging="true">
                <Columns>
                    <RadzenGridColumn TItem="WeightGroup" Property="Id" Title="ID" />
                    <RadzenGridColumn TItem="WeightGroup" Property="Name" Title="Весовая группа" />
                    <RadzenGridColumn TItem="WeightGroup" Property="From" Title="Вес ОТ" />
                    <RadzenGridColumn TItem="WeightGroup" Property="To" Title="Вес ДО" />
                    <RadzenGridColumn TItem="WeightGroup" Bubble="false" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="70px">
                        <Template Context="data">
                            <RadzenButton Icon="close" class="btn-danger" Size="ButtonSize.Small"/>
                            <RadzenButton Icon="edit" class="primary-button" Size="ButtonSize.Small"/>
                        </Template>
                    </RadzenGridColumn>
                </Columns>
            </RadzenGrid>
        </RadzenTabsItem>

    </Tabs>
</RadzenTabs>



@code {
    [CascadingParameter] public IModalService Modal { get; set; }



    SportCategory Category = new SportCategory();

    List<SportCategory> categories = new List<SportCategory>();
    List<WeightGroup> weightGroups = new List<WeightGroup>();
    List<AgeGroup> ageGroups = new List<AgeGroup>();
    List<SportCategoryType> types = new List<SportCategoryType>();
    List<Grade> grades = new List<Grade>();


    AgeGroup AgeGroup = new AgeGroup();
    WeightGroup WeightGroup = new WeightGroup();

    void SaveAgeGroup()
    {
        ageGroups.Add(AgeGroup);
        StateHasChanged();
    }

    void DeleteAgeGroup(AgeGroup ageGroup)
    {
        ageGroups.Remove(ageGroup);
        StateHasChanged();
    }

    void DeleteWeightGroup(WeightGroup weightGroup)
    {
        weightGroups.Remove(weightGroup);
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        categories = categoryService.GetCategories();
        weightGroups = WeightGroupService.GetWeightGroups();
        ageGroups = AgeGroupService.GetAgeGroups();
        types = categoryService.GetTypes();
        grades = categoryService.GetGrades();
    }

    private void DeleteCategory(SportCategory category)
    {

    }

    private void SaveChanges()
    {

    }

    private void OnChange(object args, int number)
    {

    }


    async Task CreateAgeGroup()
    {
        var form = Modal.Show<AddAgeGroup>("Создать возрастную группу");
        var result = await form.Result;
        if (result.Data != null)
        {
            AgeGroup = (AgeGroup)result.Data;
            ageGroups.Add(AgeGroup);
            StateHasChanged();
        }
    }

    async Task CreateWeightGroup()
    {
        var form = Modal.Show<AddWeightGroup>("Создать весовую группу");
        var result = await form.Result;
        if (result.Data != null)
        {
            WeightGroup = (WeightGroup)result.Data;
            //if (WeightGroup.Sex == null) WeightGroup.Sex = "МУЖ";
            //weightGroups.Add(WeightGroup);
            StateHasChanged();
        }
    }

    async Task EditAgeGroup(AgeGroup ageGroup)
    {
        ModalParameters parameters = new ModalParameters();
        parameters.Add(nameof(AgeGroup), ageGroup);
        var result = await Modal.Show<AgeGroupForm>("Редактировать возрастную группу", parameters).Result;
        if (!result.Cancelled)
        {
            ageGroups.Remove(ageGroup);
            ageGroups.Add((AgeGroup)result.Data);
            StateHasChanged();
        }

    }

    async Task EditWeightGroup(WeightGroup weightGroup)
    {
        ModalParameters parameters = new ModalParameters();
        parameters.Add(nameof(WeightGroup), weightGroup);
        var result = await Modal.Show<EditWeightGroup>("Редактировать весовую группу", parameters).Result;
        if (!result.Cancelled)
        {
            weightGroups.Remove(weightGroup);
            weightGroups.Add((WeightGroup)result.Data);
            StateHasChanged();
        }

    }
}
