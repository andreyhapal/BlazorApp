@page "/manage"
@page "/manage/{Id}/{Name}"

@using BlazorApp.Models
@using BlazorApp.Data
@inject BlazorApp.Services.CompetitionService CompetitionService
@inject BlazorApp.Data.CategoryService CategoryService
 
<div class="main-header-div">
    <h1 class="main-header">Управление соревнованием @Name</h1>
</div>
<RadzenTabs>
    <Tabs>
        <RadzenTabsItem Text="Участники">
            <RadzenButton Icon="add_circle_outline" Style="margin: 10px;background-color: #4287f5;" Text="Добавить" Click="@AddCompetitor"  class ="primary"/>
            <RadzenButton Icon="done" Style="margin:10px;background-color: #4287f5;" Text="Активировать" Click="@Activate"/>
            <RadzenButton Icon="description" Style="margin:10px;background-color: #4287f5;" Text="Загрузить из CSV" Click="@LoadFromCSV"/>
            <RadzenGrid @ref="competitorGrid" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterMode="FilterMode.Simple" AllowPaging="true" PageSize="10"
                        AllowSorting="true" Data="competitors" TItem="Competitor" AllowColumnResize="true" SelectionMode="DataGridSelectionMode.Multiple" @bind-Value=@multipleValues>
                <Columns>
                    <RadzenGridColumn TItem="Competitor" Width="40px" Sortable="false" Filterable="false">
                        <HeaderTemplate>
                            <RadzenCheckBox TriState="false" TValue="bool" Value="@(competitors.Any(i => multipleValues != null && (multipleValues as IEnumerable<Competitor>).Contains(i)))"
                                            Change="@(args => multipleValues = args ? competitors : null)" />
                        </HeaderTemplate>
                        <Template Context="data">
                            <RadzenCheckBox TriState="false" Value="@(multipleValues != null && (multipleValues as IEnumerable<Competitor>).Contains(data))" />
                        </Template>
                    </RadzenGridColumn>
                    <RadzenGridColumn TItem="Competitor" Property="Id" Title="ID"/>
                    <RadzenGridColumn TItem="Competitor" Property="StartNumber" Title="Номер"/>
                    <RadzenGridColumn TItem="Competitor" Property="FirstName" Title="Имя"/>
                    <RadzenGridColumn TItem="Competitor" Property="LastName" Title="Фамилия"/>
                    <RadzenGridColumn TItem="Competitor" Property="BirthDate" Title="Дата рождения"/>
                    <RadzenGridColumn TItem="Competitor" Property="Grade" Title="Пояс"/>
                    <RadzenGridColumn TItem="Competitor" Property="Country" Title="Страна"/>
                    <RadzenGridColumn TItem="Competitor" Property="City" Title="Город"/>
                    <RadzenGridColumn TItem="Competitor" Property="Club" Title="Клуб"/>
                    <RadzenGridColumn TItem="Competitor" Property="Category" Title="Категория"/>
                    <RadzenGridColumn TItem="Competitor" Property="Weight" Title="Вес"/>
                    <RadzenGridColumn TItem="Competitor" Property="IsActive" Title="Активный"/>
                    <RadzenGridColumn TItem="Competitor" Context="competitor" Bubble="false" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="200px">
                        <Template Context="competitor">
                            <RadzenButton Icon="edit" Size="ButtonSize.Medium"  Style="background-color: #4287f5;">
                            </RadzenButton>
                            <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="close" Size="ButtonSize.Medium" Click="@(args => DeleteRow(competitor))">
                            </RadzenButton>
                        </Template>
                    </RadzenGridColumn>
                </Columns>
            </RadzenGrid>

        </RadzenTabsItem>

        <RadzenTabsItem Text="Категории">
            <RadzenButton Text="Добавить" Style="margin:10px;background-color: #4287f5;" class ="primary" Click="@AddCompetitor"></RadzenButton>
            <RadzenButton Text="Разбить" Style="margin:10px;background-color: #4287f5;"  class ="primary"></RadzenButton>
            <RadzenButton Text="Объеденить" Style="margin:10px;background-color: #4287f5;" class ="primary"></RadzenButton>
            <RadzenGrid @ref="categoryGrid" AllowFiltering="true"  FilterMode="FilterMode.Simple" AllowPaging="true" PageSize="10"
                        AllowSorting="true" Data="Categories" TItem="Category">
                <Columns>
                    <RadzenGridColumn TItem="Category" Property="Id" Title="ID">

                    </RadzenGridColumn>
                    <RadzenGridColumn TItem="Category" Property="Name" Title="Наименование">

                    </RadzenGridColumn>
                    <RadzenGridColumn TItem="Category" Property="NumberOfCompetitors" Title="Количество участников">

                    </RadzenGridColumn>
                </Columns>
            </RadzenGrid>
        </RadzenTabsItem>

        <RadzenTabsItem Text="Жеребьевка(пули)">

        </RadzenTabsItem>

        <RadzenTabsItem Text="Татами">

        </RadzenTabsItem>

        <RadzenTabsItem Text="Судьи">

        </RadzenTabsItem>
    </Tabs>
</RadzenTabs>
@code {
    [Parameter]
    public string Name { get; set; }
    [Parameter]
    public string Id { get; set; }
    object multipleValues;

    [CascadingParameter] public IModalService Modal { get; set; }

    RadzenGrid<Competitor> competitorGrid;
    RadzenGrid<Category> categoryGrid;

    List<Competitor> competitors = new List<Competitor>();
    List<Category> Categories = new List<Category>();
    List<string> Grades = new List<string>();

    protected override void OnInitialized()
    {
        competitors = CompetitionService.GetCompetitors();
        Grades = CategoryService.GetGrades();
        Categories = CategoryService.GetCategories();
    }

    void DeleteRow(Competitor competitor)
    {
        competitors.Remove(competitor);
        competitorGrid.Reload();
    }

    void Activate()
    {
        var selectedIds = (multipleValues as IEnumerable<Competitor>).Select(x => x.Id).ToList();
        foreach (var id in selectedIds)
        {
            competitors.FirstOrDefault(x => x.Id == id).IsActive = true;
        }
        competitorGrid.Reload();
    }

    async void LoadFromCSV()
    {
        var form = Modal.Show<UploadCsv>("Загрузить файл");
        var result = await form.Result;
        if (result.Data != null)
        {
            competitors.AddRange((List<Competitor>)result.Data);
            await competitorGrid.Reload();
        }
    }

    async Task AddCompetitor()
    {
        var form = Modal.Show<AddCompetitorForm>("Добавление участника соревнования");
        var result = await form.Result;
        if (result.Data != null)
        {

        }
    }
}
