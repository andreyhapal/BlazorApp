@page "/sportsmen"

@using BlazorApp.Data
@using BlazorApp.Models
@using BlazorApp.Dialogs
@using BlazorApp.Dialogs.SportsmanForms
@using BlazorApp.Util

@inject BlazorApp.Services.SportsmenService SportsmenService
@inject BlazorApp.Data.CategoryService CategoryService
@inject NotificationService NotificationService

<div class="main-header-div">
    <h1 class="main-header">Спортсмены</h1>
</div>
<RadzenButton Icon="add_circle_outline" class="primary-button m" Text="Добавить" Click="AddSportsman" />

<RadzenGrid @ref="sportsmenGrid" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterMode="FilterMode.Simple" AllowPaging="true" PageSize="15"
            AllowSorting="true" Data="@sportsmen" TItem="Sportsman" AllowColumnResize="true" SelectionMode="DataGridSelectionMode.Multiple" @bind-Value=@multipleValues>
    <Columns>
        <RadzenGridColumn TItem="Sportsman" Width="40px" Sortable="false" Filterable="false">
            <HeaderTemplate>
                <RadzenCheckBox TriState="false" TValue="bool" Value="@(sportsmen.Any(i => multipleValues != null && (multipleValues as IEnumerable<Sportsman>).Contains(i)))"
                                Change="@(args => multipleValues = args ? sportsmen : null)" />
            </HeaderTemplate>
            <Template Context="data">
                <RadzenCheckBox TriState="false" Value="@(multipleValues != null && (multipleValues as IEnumerable<Sportsman>).Contains(data))" />
            </Template>
        </RadzenGridColumn>
        <RadzenGridColumn TItem="Sportsman" Property="Id" Title="ID" />
        <RadzenGridColumn TItem="Sportsman" Property="IKO" Title="IKO" />
        <RadzenGridColumn TItem="Sportsman" Property="LastName" Title="Фамилия" />
        <RadzenGridColumn TItem="Sportsman" Property="FirstName" Title="Имя" />
        <RadzenGridColumn TItem="Sportsman" Property="DateOfBirth" Title="Дата рождения">
            <Template Context="data">
                @data.DateOfBirth.ToShortDateString()
            </Template>
        </RadzenGridColumn>
        <RadzenGridColumn TItem="Sportsman" Property="Age" Title="Возраст" />
        <RadzenGridColumn TItem="Sportsman" Property="Weight" Title="Вес" />
        <RadzenGridColumn TItem="Sportsman" Property="Grade" Title="Пояс">
            <Template Context="data">
                @data.Grade.Name
            </Template>
        </RadzenGridColumn>
        <RadzenGridColumn TItem="Sportsman" Property="Sex" Title="Пол">
            <Template Context="data">
                @data.Sex.Name
            </Template>
        </RadzenGridColumn>
        <RadzenGridColumn TItem="Sportsman" Property="Trainer" Title="Тренер">
            <Template Context="data">
                @data.Trainer.FirstName @data.Trainer.LastName
            </Template>
        </RadzenGridColumn>
        <RadzenGridColumn TItem="Sportsman" Context="sportsman" Bubble="false" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="100px">
            <Template Context="sportsman">
                <RadzenButton Icon="edit" Size="ButtonSize.Small" class="primary-button" Click="()=>EditSportsman(sportsman.Id)">
                </RadzenButton>
            </Template>
        </RadzenGridColumn>
        <RadzenGridColumn TItem="Sportsman" Context="sportsman" Bubble="false" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="70px">
            <Template Context="sportsman">
                <RadzenButton Icon="close" class="btn-danger" Size="ButtonSize.Small" Click="@(args => Delete(sportsman.Id))">
                </RadzenButton>
            </Template>

        </RadzenGridColumn>

    </Columns>
</RadzenGrid>

@code {
    object multipleValues;

    RadzenGrid<Sportsman> sportsmenGrid;

    [CascadingParameter]
    public IModalService Modal { get; set; }

    List<Sportsman> sportsmen = new List<Sportsman>();
    List<Grade> grades;
    List<Sex> sexes;

    protected override void OnInitialized()
    {
        sportsmen = SportsmenService.GetSportsmen();
        grades = CategoryService.GetGrades();
        sexes = CategoryService.GetSexes();
    }

    async void Delete(int Id)
    {
        var form = Modal.Show<DeleteForm>("Удалить спортсмена?");
        var result = await form.Result;
        if (!result.Cancelled)
        {
            SportsmenService.DeleteSportsman(Id);
        }
        
        //sportsmen.Remove(sportsman);
        //sportsmenGrid.Reload();
    }

    async void AddSportsman()
    {
        var form = Modal.Show<AddSportsmanForm>("Создать учетную запись спортсмена");
        var result = await form.Result;
        if (result.Data != null)
        {
            ResponseObject response = SportsmenService.CreateSportsman(result.Data as Sportsman);
            if (response.IsSuccess == false)
            {
                ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Ошибка!", Detail = "Не удалось добавить спортсмена!", Duration = 4000 });
            }
            else
            {
                ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Успешно!", Detail = "Спортсмен успешно добавлен!", Duration = 4000 });
            }
        }
    }

    async void EditSportsman(int Id)
    {
        ModalParameters parameters = new ModalParameters();
        parameters.Add(nameof(Id), Id);

        var form = Modal.Show<EditSportsmanForm>("Редактирование спортсмена", parameters);
        var result = await form.Result;

        if (result.Data != null)
        {
            ResponseObject response = SportsmenService.UpdateSportsman(result.Data as Sportsman);
            if (response.IsSuccess == false)
            {
                ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Ошибка!", Detail = "Не удалось обновить данные о спортсмене!", Duration = 4000 });
            }
            else
            {
                ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Успешно!", Detail = "Данные успешно обновлены!", Duration = 4000 });
            }
        }
    }

    void ShowNotification(NotificationMessage message)
    {
        NotificationService.Notify(message);
    }
}
