@using BlazorInputFile
@using Models
@using System.IO
@using BlazorApp.Data
@using BlazorApp.Services

@inject CategoryService CategoryService
@inject SportClubService SportClubService
@inject TrainerService TrainerService 

<div class="container" style="display:flex;">
    <div class="col">
        <RadzenFieldset Text="Личные данные">
            <div class="row">
                <RadzenTextBox Placeholder="Имя" class="add-competitor-form" @bind-Value="Sportsman.FirstName"></RadzenTextBox>
            </div>
            <div class="row">
                <RadzenTextBox Placeholder="Фамилия" @bind-Value="Sportsman.LastName" class="add-competitor-form"></RadzenTextBox>
            </div>
            <div class="row" style="display:flex;vertical-align:central;justify-content:center;">
                <h4 style="margin-top:10px">М</h4>
                <RadzenSwitch @bind-Value="switcher" Style="margin:7px;" />
                <h4 style="margin-top:10px">Ж</h4>
            </div>
            <div class="row">
                <RadzenNumeric TValue="int?" class="add-competitor-form" Placeholder="Стартовый номер"></RadzenNumeric>
            </div>
            <div class="row">
                <RadzenDatePicker class="add-competitor-form" Placeholder="Дата рождения" @bind-Value="Sportsman.DateOfBirth"></RadzenDatePicker>
            </div>
            <div class="row">
                <RadzenDropDown TValue="string" Data=@Grades class="add-competitor-form" Placeholder="Пояс" @bind-Value="GradeName" />
            </div>
            <div class="row" style="display:flex;justify-content:space-between">
                <RadzenLabel Text="Возраст" Style="padding-left:15px;"></RadzenLabel>
                <RadzenNumeric class="add-competitor-form" Placeholder="Возраст" @bind-Value="Sportsman.Age"></RadzenNumeric>
            </div>
            <div class="row" style="display:flex;justify-content:space-between">
                <RadzenLabel Text="Вес" Style="padding-left:15px;"></RadzenLabel>
                <RadzenNumeric class="add-competitor-form" Placeholder="Вес" @bind-Value="Weight"></RadzenNumeric>
            </div>
        </RadzenFieldset>
        <div class="row">
            <RadzenButton Text="Создать" class="primary-button m add-competitor-form" Click="SubmitForm"></RadzenButton>
            <RadzenButton Text="Вернуться назад" class="primary-button m add-competitor-form" Click="Cancel"></RadzenButton>
        </div>
    </div>
    <div class="col">
        <RadzenFieldset Text="Фото спортсмена">
            <img src="data:image/bmp;base64, @(Convert.ToBase64String(ms.ToArray()))" style="margin:15px;" />
            <InputFile OnChange="HandleSelection" />
        </RadzenFieldset>
        <RadzenFieldset Text="Спортивный клуб">
            <div class="row">
                <RadzenTextBox Placeholder="Название" class="add-competitor-form" @bind-Value="SportClub.Name" />
            </div>
            <div class="row">
                <RadzenTextBox Placeholder="Организация" class="add-competitor-form" @bind-Value="SportClub.Organization" />
            </div>
        </RadzenFieldset>
        <RadzenFieldset Text="Тренер">
            <div class="row">
                <RadzenTextBox Placeholder="Имя" class="add-competitor-form" @bind-Value="Trainer.FirstName" />
            </div>
            <div class="row">
                <RadzenTextBox Placeholder="Фамилия" class="add-competitor-form" @bind-Value="Trainer.LastName" />
            </div>
            <div class="row">
                <RadzenDatePicker Placeholder="Дата рождения" class="add-competitor-form" @bind-Value="Trainer.DateOfBirth" />
            </div>
        </RadzenFieldset>
    </div>

</div>

@code {
        MemoryStream ms = new MemoryStream();
        bool switcher;
        string GradeName;
        int Weight;
        [CascadingParameter]
        BlazoredModalInstance BlazoredModal { get; set; }

        Trainer Trainer = new Trainer();
        SportClub SportClub = new SportClub();
        Sportsman Sportsman = new Sportsman();
        List<string> Grades = new List<string>();

    protected override void OnInitialized()
    {
        Grades = CategoryService.GetGrades().Select(x=>x.Name).ToList();
    }

    async Task HandleSelection(IFileListEntry[] files)
    {
        var file = files.FirstOrDefault();
        if (file != null)
        {
            var imageFile = await file.ToImageFileAsync("image/jpeg", 400, 300);

            ms = await imageFile.ReadAllAsync();

        }
    }

    async Task SubmitForm()
    {
        string sex = switcher ? "М" : "Ж";
        Sportsman.Sex = new Sex() { Name = sex };
        Sportsman.Grade = new Grade() { Name = GradeName };
        Sportsman.SportClub = SportClubService.GetSportClub(SportClub);
        Sportsman.Trainer = TrainerService.GetTrainer(Trainer);
        Sportsman.Weight = (decimal)Weight;

        await BlazoredModal.CloseAsync(ModalResult.Ok(Sportsman));
    }
    async Task Cancel() => await BlazoredModal.CancelAsync();
}
